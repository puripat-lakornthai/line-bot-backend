// server/src/config/db.js
const mysql = require('mysql2/promise'); // ‡πÉ‡∏ä‡πâ mysql2/promise ‡πÄ‡∏û‡∏∑‡πà‡∏≠ async/await ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
const path = require('node:path');
const fs = require('node:fs');

// ‡πÇ‡∏´‡∏•‡∏î .env.development ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà production ‡πÅ‡∏•‡∏∞ "‡πÑ‡∏°‡πà override" ‡∏Ñ‡πà‡∏≤ ENV ‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
const envPath = path.join(__dirname, '../../.env.development');
if (process.env.NODE_ENV !== 'production' && fs.existsSync(envPath)) {
  require('dotenv').config({ path: envPath, override: false });
}

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'my_helpdesk_db',
  port: parseInt(process.env.DB_PORT || "3306", 10),
  waitForConnections: true,
  connectionLimit: 10, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô pool
  queueLimit: 0,       // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô request ‡∏ó‡∏µ‡πà‡∏£‡∏≠ connection
  connectTimeout: 10000 // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Connection Pool
const pool = mysql.createPool(dbConfig);

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (Optional, ‡πÅ‡∏ï‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Server)
async function testDbConnection() {
  let connection;
  try {
    connection = await pool.getConnection();
    console.log('‚úÖüê¨ Successfully connected to the MySQL database via pool.');
    const [rows] = await connection.query('SELECT VERSION() as version');
    console.log('üî¨ MySQL Version:', rows[0].version);
  } catch (err) {
    console.error('‚ùå Failed to connect to the MySQL database:', err.message);
    if (err.code === 'ER_ACCESS_DENIED_ERROR') {
        console.error('Hint: Check your MySQL username and password in the .env file.');
    } else if (err.code === 'ER_DBACCESS_DENIED_ERROR') {
        console.error(`Hint: Ensure the user '${dbConfig.user}' has access to the database '${dbConfig.database}'.`);
    } else if (err.code === 'ENOTFOUND' || err.code === 'ECONNREFUSED') {
        console.error(`Hint: Check if the MySQL server is running at '${dbConfig.host}:${dbConfig.port}'.`);
    }
    // process.exit(1); // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ Server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠ DB ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  } finally {
    if (connection) connection.release(); // ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà pool ‡πÄ‡∏™‡∏°‡∏≠
  }
}

testDbConnection(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Server

module.exports = {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô query ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mysql2
  query: async (sql, params) => {
    const start = Date.now();
    let connection;
    try {
      connection = await pool.getConnection(); // ‡∏î‡∏∂‡∏á connection ‡∏à‡∏≤‡∏Å pool
      const [results, fields] = await connection.execute(sql, params); // ‡πÉ‡∏ä‡πâ execute ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection ‡∏Å‡∏±‡∏ö prepared statements
      const duration = Date.now() - start;
      if (process.env.NODE_ENV === 'development') {
        // MySQL `results` ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ property `affectedRows`, `insertId` ‡∏Ø‡∏•‡∏Ø ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó query
        // `results` ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Ñ‡∏∑‡∏≠ array ‡∏Ç‡∏≠‡∏á rows ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SELECT
        const rowCount = Array.isArray(results) ? results.length : (results.affectedRows || 0);
        // console.log('üîç Executed query (MySQL):', { sql: sql.substring(0, 100) + (sql.length > 100 ? '...' : ''), duration: `${duration}ms`, rows: rowCount });
      }
      return results; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ results (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SELECT ‡∏Ñ‡∏∑‡∏≠ array ‡∏Ç‡∏≠‡∏á rows, ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö INSERT/UPDATE/DELETE ‡∏Ñ‡∏∑‡∏≠ object ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    } catch (error) {
      // console.error('‚ùå MySQL Database query error:', { sql: sql.substring(0,100) + '...', params, message: error.message });
      throw error; // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ controller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    } finally {
      if (connection) connection.release(); // ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà pool ‡πÄ‡∏™‡∏°‡∏≠
    }
  },
  pool // Export pool ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ transaction ‡∏´‡∏£‡∏∑‡∏≠ operation ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
};