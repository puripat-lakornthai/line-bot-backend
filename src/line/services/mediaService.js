// server/src/line/services/mediaService.js

/**
 * mediaService.js  (stream version)
 * ---------------------------------
 * - ‡∏î‡∏∂‡∏á media ‡∏à‡∏≤‡∏Å LINE ‡∏ó‡∏≤‡∏á stream
 * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
 * - pipe ‡∏•‡∏á uploads/temp/<type>/...
 */

const axios  = require('axios');
const fs     = require('fs');
const path   = require('path');
const mime   = require('mime-types');
const { pipeline } = require('stream/promises');
const { lineMessagingApiConfig } = require('../config/lineConfig');

/** üîí limit (byte) */
const MAX_FILE_SIZES = {
  image   : 1  * 1024 * 1024,   // 1 MB
  video   : 50 * 1024 * 1024,   // 50 MB
  file    : 20 * 1024 * 1024,   // 20 MB
  default : 10 * 1024 * 1024
};

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î media ‡∏à‡∏≤‡∏Å LINE ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ticketId + timestamp + ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏∏‡πà‡∏°
exports.downloadLineMedia = async (message, lineUid, ticketId, userId) => {
  const url     = `https://api-data.line.me/v2/bot/message/${message.id}/content`;
  const headers = { Authorization: `Bearer ${lineMessagingApiConfig.channelAccessToken}` };

  // (1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î MIME ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ HEAD request
  const head = await axios.head(url, { headers });
  const size = Number(head.headers['content-length'] || 0);
  const cType = head.headers['content-type'] || 'application/octet-stream';

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (image / file / video)
  const limit = MAX_FILE_SIZES[message.type] ?? MAX_FILE_SIZES.default;
  if (size > limit) {
    throw new Error(
      `‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î ${(size / 1024 / 1024).toFixed(1)} MB ‡πÄ‡∏Å‡∏¥‡∏ô ${(limit / 1024 / 1024)} MB`
    );
  }

  // (2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö temp (‡πÄ‡∏ä‡πà‡∏ô /uploads/temp/image)
  const baseDir = path.join(__dirname, '../uploads/temp', message.type || 'others');
  if (!fs.existsSync(baseDir)) fs.mkdirSync(baseDir, { recursive: true });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å MIME type
  const extHead = path.extname(message.fileName || '');
  const extMime = mime.extension(cType) || 'bin';
  const ext     = extHead && extHead.startsWith('.') ? extHead : `.${extMime}`;

  // (3.1) ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏°: ticket_<ticketId>_user_<userId>_<timestamp>.ext
  const safeTicketId = ticketId || 'unknown';
  const safeUserId   = userId || lineUid;
  const timestamp    = Date.now();
  const filename     = `ticket_${safeTicketId}_user_${safeUserId}_${timestamp}${ext}`;

  // (3.2) ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
  const now = new Date();
  const timeStr = now.toISOString().replace(/[-:]/g, '').slice(0, 15).replace('T', '_'); // YYYYMMDD_HHmmss
  const random = Math.random().toString(36).substring(2, 5); // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏∏‡πà‡∏° 3 ‡∏ï‡∏±‡∏ß
  const altFilename = `ticket_${safeTicketId}_${timeStr}_${random}${ext}`;

  // (3.3) ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ altFilename ‡πÅ‡∏ó‡∏ô filename ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
  const absPath = path.join(baseDir, altFilename);

  // (4) ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE ‡πÅ‡∏ö‡∏ö stream ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
  const res = await axios.get(url, { headers, responseType: 'stream' });
  await pipeline(res.data, fs.createWriteStream(absPath));  // non-blocking I/O

  // (5) ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° buffer)
  return {
    originalname : message.fileName || altFilename,
    path         : `/uploads/temp/${message.type || 'others'}/${altFilename}`, // public path
    mimetype     : cType,
    size,
    extension    : ext
  };
};

exports.moveTempToPermanent = (meta, ticketId) => {
  const rootDir = path.join(__dirname, '..');

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏ô‡∏¥‡∏î subfolder: image / video / file / others
  const type = {
    ‡∏†‡∏≤‡∏û: 'image',
    ‡πÑ‡∏ü‡∏•‡πå: 'file',
    ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: 'video'
  }[meta.type] || 'others';

  const srcAbs = path.join(rootDir, meta.path);
  const destDir = path.join(rootDir, 'uploads', String(ticketId), type);

  if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });

  const destAbs = path.join(destDir, path.basename(srcAbs));
  fs.renameSync(srcAbs, destAbs);

  return {
    ...meta,
    path: `/uploads/${ticketId}/${type}/${path.basename(destAbs)}` // ‚Üê path ‡πÉ‡∏´‡∏°‡πà
  };
};


// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡∏à‡∏≤‡∏Å session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏≤‡∏ß‡∏£
// ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
exports.deleteTempFiles = (sess) => {
  const rootDir = path.join(__dirname, '..'); // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á root ‡∏Ç‡∏≠‡∏á uploads
  (sess?.data?.pending_files || []).forEach((m) => { // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session
    try {
      fs.unlinkSync(path.join(rootDir, m.path)); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å disk
    } catch {} // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ) ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô
  });
};

// ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ticket ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
// ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö ticket ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢
exports.deleteTicketFolder = async (ticketId) => {
  const folderPath = path.join(__dirname, '../uploads', String(ticketId)); // path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á ticket ‡∏ô‡∏±‡πâ‡∏ô
  try {
    await fs.promises.rm(folderPath, { recursive: true, force: true }); // ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö force
    console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ô‡∏ö ticket-${ticketId} ‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (err) {
    console.error(`‚ùå ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ticket-${ticketId}:`, err.message);
  }
};


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ maxAgeMinutes ‡∏ô‡∏≤‡∏ó‡∏µ
exports.cleanOldTempFiles = (maxAgeMinutes = 60) => { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 60
  const baseTempPath = path.join(__dirname, '../uploads/temp'); // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏´‡∏•‡∏±‡∏Å
  const subfolders = ['image', 'video', 'file', 'others'];      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á media
  const now = Date.now();                                       // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  subfolders.forEach((sub) => {
    const folder = path.join(baseTempPath, sub); // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô /temp/image
    if (!fs.existsSync(folder)) return;          // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    fs.readdir(folder, (err, files) => {
      if (err) return console.error(`‚ùå ‡∏≠‡πà‡∏≤‡∏ô ${folder} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:`, err.message);
      
      files.forEach((file) => {
        const fullPath = path.join(folder, file); // path ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        fs.stat(fullPath, (err, stats) => {
          if (err) return;
          const ageMs = now - stats.mtimeMs; // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (ms)

          // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
          if (ageMs > maxAgeMinutes * 60 * 1000) {
            fs.unlink(fullPath, (err) => {
              if (!err) console.log(`üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${fullPath}`);
            });
          }
        });
      });
    });
  });
};
