// handleTextMessage.js
// ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó text ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
// ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° flow ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö step-by-step ‡∏ú‡πà‡∏≤‡∏ô session

const sessionStore = require('../services/sessionService');
const Ticket = require('../../models/ticketModel');
const User = require('../../models/userModel');
const { reply } = require('../utils/lineClient');
const { isSpammyText, isInvalidPhone, isInvalidName } = require('../utils/validators');
const { moveTempToPermanent, deleteTempFiles } = require('../services/mediaService');
const { increaseRetry, checkAndRefreshTTL } = require('../utils/sessionUtils');

// ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Tickets
const statusLabel = {
  new: '‡πÉ‡∏´‡∏°‡πà',
  assigned: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
  in_progress: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  pending: '‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
  resolved: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß',
  closed: '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const handleTextMessage = async (event) => {
  const uid = event.source.userId;
  const text = event.message.text.trim();
  const lower = text.toLowerCase();

  await User.findOrCreateByLineId(uid);

  // ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ "‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ session ‡∏°‡∏±‡∏ô‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î
  if (lower === '‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') {
    const list = await Ticket.getTicketsByLineUserId(uid);
    if (!list.length) return reply(event.replyToken, '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤');
    const info = list.map(t => `#${t.ticket_id} - ${t.title} (${statusLabel[t.status] || t.status})`).join('\n');
    return reply(event.replyToken, `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${list.length} ‡∏á‡∏≤‡∏ô\n\n${info}`);
  }

  /* ‡πÇ‡∏´‡∏•‡∏î session ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å store (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≠ TTL) */
  const rawSess = await sessionStore.getSession(uid);

  // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏≠‡∏¢ "‡∏ï‡πà‡∏≠ TTL" ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  const { session: refreshedSess } = await checkAndRefreshTTL(uid, rawSess);
  let sess = refreshedSess;

  // ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏•‡πâ‡∏≤‡∏á session ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp
  if (lower === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
    if (sess) {
      sess.cancelled = true; // ‡∏ï‡∏¥‡∏î‡∏ò‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      await sessionStore.setSession(uid, sess); // ‡πÄ‡∏ã‡∏ü‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á
      await deleteTempFiles(sess); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡πÉ‡∏´‡πâ‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    }

    // ‡∏ï‡∏±‡πâ‡∏á session ‡πÄ‡∏õ‡πá‡∏ô idle ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (warned = true) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡πà‡∏≠ TTL
    await checkAndRefreshTTL(uid, {
      step: 'idle',
      data: { ...(sess?.data || {}), warned: true, expiredNotified: true, expiredFlag: false }, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô true ‡∏Å‡∏±‡∏ô push ‡∏ï‡∏≠‡∏ô idle
      retryCount: 0,
    });

    return reply(event.replyToken, '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤"');
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ idle ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠)
  if (sess && sess.step === 'idle') {
    if (lower === '‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤') {
      await checkAndRefreshTTL(uid, {
        step: 'ask_name',
        data: { ...(sess.data || {}), lastAckTs: 0, expiredNotified: false, expiredFlag: false },
        retryCount: 0,
      });
      return reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
    }
    // ‡∏≠‡∏¢‡∏π‡πà idle ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    return reply(event.replyToken, '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤"');
  }

// =================================================================================================================================

  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô session
  switch (sess.step) {
    case 'ask_name': {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠
      if (text.length < 2 || isInvalidName(text)) {
        if (await increaseRetry(uid, sess) >= 5) {
          // ‡∏´‡∏≤‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session
          await sessionStore.clearSession(uid);
          return reply(event.replyToken, '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
        return reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }

      // ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å database ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const requesterId = await User.findOrCreateByLineId(uid);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      await checkAndRefreshTTL(uid, {
        step: 'ask_phone',
        data: { ...sess.data, name: text, user_id: requesterId  },
        retryCount: 0,
      });
      return reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
    }

    case 'ask_phone': {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
      if (isInvalidPhone(text)) {
        if (await increaseRetry(uid, sess) >= 5) {
          await sessionStore.clearSession(uid);
          return reply(event.replyToken, '‡∏ú‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
        }
        return reply(event.replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      await checkAndRefreshTTL(uid, {
        step: 'ask_detail',
        data: { ...sess.data, phone: text },
        retryCount: 0,
      });
      return reply(event.replyToken, '‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    }

    case 'ask_detail': {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° spam ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (text.length < 10 || isSpammyText(text)) {
        if (await increaseRetry(uid, sess) >= 5) {
          await sessionStore.clearSession(uid);
          return reply(event.replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
        return reply(event.replyToken, '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°');
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      await checkAndRefreshTTL(uid, {
        step: 'ask_priority',
        data: { ...sess.data, detail: text },
        retryCount: 0,
      });
      return reply(event.replyToken,
        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç 1, 2 ‡∏´‡∏£‡∏∑‡∏≠ 3\n\n` +
        `1 - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á)\n` +
        `2 - ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)\n` +
        `3 - ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡πà‡∏≠‡∏¢)`
      );
    }

    case 'ask_priority': {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å priority ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (1, 2, 3)
      if (!['1', '2', '3'].includes(text)) {
        if (await increaseRetry(uid, sess) >= 5) {
          await sessionStore.clearSession(uid);
          return reply(event.replyToken, '‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà');
        }
        return reply(event.replyToken, '‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç 1, 2 ‡∏´‡∏£‡∏∑‡∏≠ 3 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      }

      // ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å database ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const requesterId = await User.findOrCreateByLineId(uid);

      // ‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏£‡∏≠‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏ì ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ)
      await checkAndRefreshTTL(uid, {
        step: 'wait_image',
        data: {
          ...sess.data,
          priority: Number(text),
          // ticket_id: ticketId, // ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ticket_id ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
          user_id: requesterId
        },
        retryCount: 0,
      });

      return reply(
        event.replyToken,
        'üìé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û ‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n' +
        '‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå\n' +
        '‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÑ‡∏°‡πà‡∏°‡∏µ" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå\n' +
        '‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
      );
    }

    case 'wait_image': {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÑ‡∏°‡πà‡∏°‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå
      if (!['‡πÑ‡∏°‡πà‡∏°‡∏µ', '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß'].includes(lower)) return;

      // ‡πÉ‡∏ä‡πâ user_id ‡∏à‡∏≤‡∏Å session (‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô ask_priority)
      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å findOrCreateByLineId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á user_id ‡πÉ‡∏´‡∏°‡πà
      const requesterId = sess.data.user_id || await User.findOrCreateByLineId(uid);

      // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå temp ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á
      const latestSess = await sessionStore.getSession(uid);
      const pendingFiles = latestSess?.data?.pending_files || [];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏ì ‡∏à‡∏∏‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
      let ticketId = sess.data.ticket_id;

      // fallback ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏ñ‡πâ‡∏≤ flow ‡∏ñ‡∏π‡∏Å)
      if (!ticketId) {
        const { insertId } = await Ticket.createTicket({
          title: `${sess.data.name}`,
          description: sess.data.detail,
          requester_name: sess.data.name,
          requester_phone: sess.data.phone,
          line_user_id: uid,
          priority: sess.data.priority,
          status: 'new',
        });
        ticketId = insertId;

        // ‡πÄ‡∏Å‡πá‡∏ö ticket_id ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥/‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏Å‡∏ß‡πà‡∏á
        await checkAndRefreshTTL(uid, {
          ...sess,
          data: { ...sess.data, ticket_id: ticketId, user_id: requesterId },
        });
      }

      // ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå temp (‡∏ñ‡πâ‡∏≤ "‡πÑ‡∏°‡πà‡∏°‡∏µ")
      if (lower === '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' && pendingFiles.length > 0) {
        for (const m of pendingFiles) {
          // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å temp ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏≤‡∏ß‡∏£‡∏Ç‡∏≠‡∏á ticket
          const perm = await moveTempToPermanent(m, ticketId);

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏•‡∏á‡πÉ‡∏ô database
          await Ticket.addAttachments(
            ticketId,
            [{
              file_name: perm.originalname,
              file_path: perm.path,
              mime_type: perm.mimetype,
              file_size: perm.size,
            }],
            requesterId
          );
        }
      } else if (lower === '‡πÑ‡∏°‡πà‡∏°‡∏µ' && pendingFiles.length > 0) {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await deleteTempFiles(latestSess);
      }

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      await sessionStore.clearSession(uid);

      // ‡∏ï‡∏±‡πâ‡∏á session ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô idle + ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
      await checkAndRefreshTTL(uid, {
        step: 'idle',
        data: { ...(sess?.data || {}), warned: true, expiredNotified: true, expiredFlag: false }, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô true ‡∏Å‡∏±‡∏ô push ‡∏ï‡∏≠‡∏ô idle
        retryCount: 0,
      });

      return reply(event.replyToken,
        `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÅ‡∏•‡πâ‡∏ß!\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç #${ticketId}\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ üôè\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞`
      );
    }
  }
};

// export ‡πÅ‡∏ö‡∏ö default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
module.exports = handleTextMessage;
