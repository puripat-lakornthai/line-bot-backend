// server/src/handlers/mediaHandler.js

// mediaHandler.js ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE (‡∏†‡∏≤‡∏û / ‡πÑ‡∏ü‡∏•‡πå / ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)

const { downloadLineMedia, deleteTempFiles } = require('../services/mediaService');
const { maybeReplyUploading, saveToSession } = require('../utils/sessionUtils');
const sessionStore = require('../services/sessionService');
const { pushDone } = require('../utils/lineClient');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏û / ‡πÑ‡∏ü‡∏•‡πå / ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
// tag      : ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'üì∑'
// kindTH   : ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Ç‡∏≠‡∏á media ‡πÄ‡∏ä‡πà‡∏ô '‡∏†‡∏≤‡∏û'
// typeKey  : ‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ô session ‡πÄ‡∏ä‡πà‡∏ô 'image' / 'file' / 'video'
const makeMediaHandler = (tag, kindTH, typeKey) => async (event) => {
  const uid = event.source.userId;

  // ‡πÇ‡∏´‡∏•‡∏î session ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  let sess = await sessionStore.getSession(uid);
  if (!sess || sess.step !== 'wait_image') return;

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ß ‡πÜ
  const didReply = await maybeReplyUploading(event, sess, tag, typeKey);

  // async IIFE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ error ‡∏î‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å flow ‡∏´‡∏•‡∏±‡∏Å
  (async () => {
    try {
      // ‡∏î‡∏∂‡∏á ticketId ‡πÅ‡∏•‡∏∞ userId ‡∏à‡∏≤‡∏Å session (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
      const ticketId = sess?.data?.ticket_id;
      const userId = sess?.data?.user_id;

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î media ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ ticketId + userId
      const meta = await downloadLineMedia(event.message, uid, ticketId, userId);

      // ‡πÇ‡∏´‡∏•‡∏î session ‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠ session ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠
      const latest = await sessionStore.getSession(uid);
      if (!latest || latest.cancelled) {
        // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡∏ó‡∏¥‡πâ‡∏á
        await deleteTempFiles({ data: { pending_files: [meta] } });
        return;
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô session (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö buffer ‡∏à‡∏£‡∏¥‡∏á)
      await saveToSession(uid, latest, { ...meta, type: kindTH });

      // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤ "‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß!" ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (didReply) await pushDone(uid, `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å${kindTH}‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`);
    } catch (e) {
      const msg = e.message.includes('‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î')
        ? `${e.message}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á${kindTH}‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ`
        : `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å${kindTH}‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà`;
      await pushDone(uid, `‚ùå ${msg}`);
      console.error(`[${kindTH}]`, e);
    }
  })();
};

// export handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô lineMessageService.js export ‡πÅ‡∏ö‡∏ö object literal
module.exports = {
  handleImageMessage: makeMediaHandler('üì∑', '‡∏†‡∏≤‡∏û', 'image'),
  handleFileMessage: makeMediaHandler('üìé', '‡πÑ‡∏ü‡∏•‡πå', 'file'),
  handleVideoMessage: makeMediaHandler('üéûÔ∏è', '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠', 'video'),
};
