// server/src/controllers/ticketController.js

const ticketModel = require('../models/ticketModel');
const { pushDone } = require('../line/utils/lineClient');
const { deleteTicketFolder } = require('../line/services/mediaService');

exports.createTicket = async (req, res) => {
  try {
    const { title, description, line_user_id } = req.body;
    const requester_id = req.user?.id || null;
    const files = req.files || [];
    const result = await ticketModel.createTicket({ title, description, requester_id, line_user_id }, files);
    res.status(201).json({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', ticketId: result.ticketId });
  } catch (error) {
    console.error('Create Ticket Error:', error.message);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket' });
  }
};

// ‡∏î‡∏∂‡∏á ticket ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡∏°‡∏µ filter + pagination (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô controller)
exports.getAllTickets = async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ page ‡∏à‡∏≤‡∏Å query string ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ page >= 1
    const page = Math.max(parseInt(req.query.page) || 1, 1);

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: limit ‡πÅ‡∏¢‡∏Å dev/prod ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const limit = process.env.NODE_ENV === 'production' ? 10 : 2;

    const offset = (page - 1) * limit; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì offset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQL

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° filters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ model
    const filters = {
      offset,                 // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£
      limit,                  // ‡∏î‡∏∂‡∏á‡∏Å‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      status: req.query.status,          // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      assignee_id: req.query.assignee_id, // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
      sort_by: req.query.sort_by,         // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      sort_order: req.query.sort_order    // ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const data = await ticketModel.getAllTicketsWithFilter(filters);

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö frontend
    res.status(200).json({
      tickets: data.tickets ?? [],
      totalPages: Math.max(1, Math.ceil((data.total || 0) / limit)),  // ‚úÖ ‡∏Å‡∏±‡∏ô 0 ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ undefined
      total: data.total ?? 0,
      currentPage: page,
    });
  } catch (error) {
    console.error('Get All Tickets Controller Error:', error);
    res.status(500).json({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
      tickets: [],
      totalPages: 1,
      currentPage: 1,
      total: 0
    });
  }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á)
exports.getTicketById = async (req, res) => {
  try {
    const ticket = req.ticket; // ‡πÉ‡∏ä‡πâ ticket ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DB ‡∏ã‡πâ‡∏≥

    res.json(ticket);
  } catch (error) {
    console.error(`CONTROLLER ERROR for getTicketById (ID: ${req.params.id}):`, error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà Server' });
  }
};

// ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ staff ‡πÉ‡∏´‡πâ Ticket (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
exports.assignTicket = async (req, res) => {
  try {
    const ticketId = req.params.id;
    const userId = req.user?.id;

    const assigneeIds = req.body.assignee_ids || 
    (req.body.assignee_id ? [req.body.assignee_id] : []);

    console.log('üìå ticketId:', ticketId);
    console.log('üìå userId:', userId);
    console.log('üìå assigneeIds:', assigneeIds);

    if (!Array.isArray(assigneeIds)) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    await ticketModel.assignTicket(ticketId, assigneeIds, userId);
    res.json({ message: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('Assign Ticket Error:', err); // error
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ticket ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡∏£‡∏ß‡∏° ticket_id, ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
exports.updateTicket = async (req, res) => {
  try {
    const ticketId = req.params.id;
    const updateData = req.body;
    const user = req.user;
    const ticket = req.ticket; // ‡πÉ‡∏ä‡πâ ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å model

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ staff ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    // if (user.role === 'staff') {
    //   const restrictedFields = ['title', 'description', 'assignee_id'];
    //   const hasRestricted = restrictedFields.some(field => updateData.hasOwnProperty(field));
    //   if (hasRestricted) {
    //     return res.status(403).json({ message: 'Staff ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
    //   }
    // }

    // ‡πÅ‡∏¢‡∏Å assignee_id ‡∏≠‡∏≠‡∏Å ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ model
    const { assignee_id, ...restData } = updateData;
    const oldStatus = ticket.status;

    const result = await ticketModel.updateTicket(ticketId, restData, user.id);
    if (result?.error) {
      return res.status(500).json({ message: result.error });
    }

    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° label ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const statusMap = {
      new: {
        label: '‡πÉ‡∏´‡∏°‡πà',
        message: '‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö'
      },
      assigned: {
        label: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        message: '‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß'
      },
      pending: {
        label: '‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
        message: '‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\n‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
      },
      in_progress: {
        label: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
        message: '‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
      },
      resolved: {
        label: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß',
        message: '‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      },
      closed: {
        label: '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô',
        message: '‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤'
      }
    };

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ line_user_id
    if (restData.status && restData.status !== oldStatus && ticket.line_user_id) {
      const oldLabel = statusMap[oldStatus]?.label || oldStatus;
      const newLabel = statusMap[restData.status]?.label || restData.status;
      const message = statusMap[restData.status]?.message || '';

      let msg = `üìå ‡∏á‡∏≤‡∏ô #${ticket.ticket_id} "${ticket.title}" ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "${oldLabel}" ‡πÄ‡∏õ‡πá‡∏ô "${newLabel}"\n\n‚ÑπÔ∏è ${message}`;

      if (restData.status === 'closed') {
        msg += `\n\nüôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤`;
      }

      await pushDone(ticket.line_user_id, msg);
    }

    return res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    console.error('Update Ticket Error:', error.message);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Ticket' });
  }
};

// ‡∏•‡∏ö Ticket ‡∏ï‡∏≤‡∏° ID ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô LINE ‡∏´‡∏≤‡∏Å‡∏°‡∏µ line_user_id
exports.deleteTicket = async (req, res) => {
  const ticketId = req.params.id;
  try {
    const ticket = req.ticket; // ‡πÉ‡∏ä‡πâ ticket ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DB ‡∏ã‡πâ‡∏≥

    // ‡∏•‡∏ö DB ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    await ticketModel.deleteTicket(ticketId);
    await deleteTicketFolder(ticketId);

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á LINE ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ line_user_id
    if (ticket.line_user_id) {
      await pushDone(
        ticket.line_user_id,
        `‚ùå ‡∏á‡∏≤‡∏ô "${ticket.title}" (#${ticket.ticket_id}) ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${new Date(ticket.created_at).toLocaleString('th-TH')} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`
      );
    }

    res.json({ message: '‡∏•‡∏ö Ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    console.error('Delete Ticket Error:', error.message);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Ticket' });
  }
};



